import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ListPanelTest {

	@Test
	public void testDoubleClick_withNonNullValueAndNonNullCallback() {
    	// ListPanel listPanel = new ListPanel();
    	// listPanel.setDoubleClickCallback(mock(Callback.class));
    	// listPanel.setList(mock(JList.class));
    	mock(JList.class);
    	when(listPanel.getList().getSelectedValue()).thenReturn(mock(Object.class));

    	listPanel.doubleClick(mock(Object.class));

    	// Verify that the callback is called
// Test suite only aims at checking if the function is invoked rather than covering the branch
    	verify(listPanel.getDoubleClickCallback()).callback(any());
    	// Verify that the editElement method is not called
    	verify(listPanel, never()).editElement(any());
	}

	@Test
	public void testDoubleClick_withNonNullValueAndNullCallback() {
    	ListPanel listPanel = new ListPanel();
    	listPanel.setDoubleClickCallback(null);
    	listPanel.setList(mock(JList.class));
    	when(listPanel.getList().getSelectedValue()).thenReturn(mock(Object.class));

    	listPanel.doubleClick(mock(Object.class));

    	// Verify that the editElement method is called
    	verify(listPanel).editElement(any());
	}

	@Test
	public void testDoubleClick_withNullValue() {
    	ListPanel listPanel = new ListPanel();
    	listPanel.setDoubleClickCallback(mock(Callback.class));
    	listPanel.setList(mock(JList.class));
    	when(listPanel.getList().getSelectedValue()).thenReturn(null);

    	listPanel.doubleClick(mock(Object.class));

    	// Verify that neither the callback nor the editElement method are called
    	verify(listPanel, never()).getDoubleClickCallback();
    	verify(listPanel, never()).editElement(any());
	}

}
