package macaw.persistenceLayer.demo;

import macaw.businessLayer.User;
import macaw.businessLayer.Variable;
import macaw.system.MacawException;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class TestSuite {


    @Before
    public void setUp() {
        // Initialize the variable manager, InMemoryChangeEventManager, and user object for testing
        InMemoryChangeEventManager eventManager = new InMemoryChangeEventManager();
        InMemoryListChoiceManager listChoiceManager = new InMemoryListChoiceManager(eventManager);
        InMemoryOntologyTermManager ontologyTermManager = new InMemoryOntologyTermManager(eventManager);
        InMemorySupportingDocumentsManager supportingDocumentsManager = new InMemorySupportingDocumentsManager(eventManager);
        InMemoryVariableManager variableManager = new InMemoryVariableManager(eventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
        User user = new User();
    }

    @Test
    public void testGetVariable_WhenVariableNameIsEmpty_ShouldReturnNull() throws MacawException {
     	   InMemoryChangeEventManager eventManager = new InMemoryChangeEventManager();
 		   InMemoryListChoiceManager listChoiceManager = new InMemoryListChoiceManager(eventManager);
 		   InMemoryOntologyTermManager ontologyTermManager = new InMemoryOntologyTermManager(eventManager);
 		   InMemorySupportingDocumentsManager supportingDocumentsManager = new InMemorySupportingDocumentsManager(eventManager);
 		   InMemoryVariableManager variableManager = new InMemoryVariableManager(eventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
 		   User user = new User();
        // Arrange
        String variableName = "";

        // Act
        Variable result = variableManager.getVariable(user, variableName);

        // Assert
        assertNull(result);
    }

    @Test
    public void testGetVariable_WhenVariableNameDoesNotMatchAnyVariable_ShouldReturnNull() throws MacawException {
     	   InMemoryChangeEventManager eventManager = new InMemoryChangeEventManager();
 		   InMemoryListChoiceManager listChoiceManager = new InMemoryListChoiceManager(eventManager);
 		   InMemoryOntologyTermManager ontologyTermManager = new InMemoryOntologyTermManager(eventManager);
 		   InMemorySupportingDocumentsManager supportingDocumentsManager = new InMemorySupportingDocumentsManager(eventManager);
 		   InMemoryVariableManager variableManager = new InMemoryVariableManager(eventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
 		   User user = new User();
        // Arrange
        String variableName = "NonExistentVariable";

        // Act
        Variable result = variableManager.getVariable(user, variableName);

        // Assert
        assertNull(result);
    }

    @Test
    public void testGetVariable_WhenVariableNameMatchesVariable_ShouldReturnClonedVariable() throws MacawException {
     	   InMemoryChangeEventManager eventManager = new InMemoryChangeEventManager();
 		   InMemoryListChoiceManager listChoiceManager = new InMemoryListChoiceManager(eventManager);
 		   InMemoryOntologyTermManager ontologyTermManager = new InMemoryOntologyTermManager(eventManager);
 		   InMemorySupportingDocumentsManager supportingDocumentsManager = new InMemorySupportingDocumentsManager(eventManager);
 		   InMemoryVariableManager variableManager = new InMemoryVariableManager(eventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
 		   User user = new User();
        // Arrange
        String variableName = "ExistingVariable";
        Variable existingVariable = new Variable(variableName);
        variableManager.addVariable(user, existingVariable);

        // Act
        Variable result = variableManager.getVariable(user, variableName);

        // Assert
        assertNotNull(result);
        assertNotSame(existingVariable, result);
        assertEquals(existingVariable, result);
    }

    public void test5() {

    	// Test case 5
    	InMemoryChangeEventManager inMemoryChangeEventManager0 = new InMemoryChangeEventManager();
    	InMemoryListChoiceManager inMemoryListChoiceManager0 = new InMemoryListChoiceManager(inMemoryChangeEventManager0);
    	InMemoryOntologyTermManager inMemoryOntologyTermManager0 = new InMemoryOntologyTermManager(inMemoryChangeEventManager0);
    	InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager0 = new InMemorySupportingDocumentsManager(inMemoryChangeEventManager0);
    	InMemoryVariableManager inMemoryVariableManager0 = new InMemoryVariableManager(inMemoryChangeEventManager0, inMemoryListChoiceManager0, inMemoryOntologyTermManager0, inMemorySupportingDocumentsManager0);
    	User user0 = new User();
    	String string0 = "NonExistingValue";
    	Variable variable0 = new Variable();
    	variable0.setName("VariableName");
    	ArrayList<Variable> variables = inMemoryVariableManager0.getVariables(user0);
    	variables.add(variable0);
    	Variable variable1 = inMemoryVariableManager0.getVariable(user0, string0);
    }

    public void test6() {
    	InMemoryChangeEventManager inMemoryChangeEventManager1 = new InMemoryChangeEventManager();
    	InMemoryListChoiceManager inMemoryListChoiceManager1 = new InMemoryListChoiceManager(inMemoryChangeEventManager1);
    	InMemoryOntologyTermManager inMemoryOntologyTermManager1 = new InMemoryOntologyTermManager(inMemoryChangeEventManager1);
    	InMemorySupportingDocumentsManager inMemorySupportingDocumentsManager1 = new InMemorySupportingDocumentsManager(inMemoryChangeEventManager1);
    	InMemoryVariableManager inMemoryVariableManager1 = new InMemoryVariableManager(inMemoryChangeEventManager1, inMemoryListChoiceManager1, inMemoryOntologyTermManager1, inMemorySupportingDocumentsManager1);
    	User user1 = new User();
    	String string1 = "ExistingValue";
    	Variable variable2 = new Variable();
    	variable2.setName("VariableName");
    	ArrayList<Variable> variables = inMemoryVariableManager1.getVariables(user1);
    	variables.add(variable2);
    	Variable variable3 = inMemoryVariableManager1.getVariable(user1, string1);

    }

    @After
    public void tearDown() {
        // Reset any changes made during test cases, if necessary
    }
}




